// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ProtoCliente

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PedidosServiceClient is the client API for PedidosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PedidosServiceClient interface {
	// servicios cliente
	PostPedido(ctx context.Context, in *PedidoSolicitudRequest, opts ...grpc.CallOption) (*Pedido, error)
	// servicios restaurante
	PostPedidoRestaurante(ctx context.Context, in *Pedido, opts ...grpc.CallOption) (*Pedido, error)
	PostEntregarRepartidor(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error)
	GetRestaurante(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error)
	// servicios repartidor
	PostPedidoRepartidor(ctx context.Context, in *Pedido, opts ...grpc.CallOption) (*Pedido, error)
	PostEntregarCliente(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error)
	GetRepartidor(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error)
}

type pedidosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPedidosServiceClient(cc grpc.ClientConnInterface) PedidosServiceClient {
	return &pedidosServiceClient{cc}
}

func (c *pedidosServiceClient) PostPedido(ctx context.Context, in *PedidoSolicitudRequest, opts ...grpc.CallOption) (*Pedido, error) {
	out := new(Pedido)
	err := c.cc.Invoke(ctx, "/grpc.PedidosService/PostPedido", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedidosServiceClient) PostPedidoRestaurante(ctx context.Context, in *Pedido, opts ...grpc.CallOption) (*Pedido, error) {
	out := new(Pedido)
	err := c.cc.Invoke(ctx, "/grpc.PedidosService/PostPedidoRestaurante", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedidosServiceClient) PostEntregarRepartidor(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error) {
	out := new(Pedido)
	err := c.cc.Invoke(ctx, "/grpc.PedidosService/PostEntregarRepartidor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedidosServiceClient) GetRestaurante(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error) {
	out := new(Pedido)
	err := c.cc.Invoke(ctx, "/grpc.PedidosService/GetRestaurante", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedidosServiceClient) PostPedidoRepartidor(ctx context.Context, in *Pedido, opts ...grpc.CallOption) (*Pedido, error) {
	out := new(Pedido)
	err := c.cc.Invoke(ctx, "/grpc.PedidosService/PostPedidoRepartidor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedidosServiceClient) PostEntregarCliente(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error) {
	out := new(Pedido)
	err := c.cc.Invoke(ctx, "/grpc.PedidosService/PostEntregarCliente", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedidosServiceClient) GetRepartidor(ctx context.Context, in *IdPedido, opts ...grpc.CallOption) (*Pedido, error) {
	out := new(Pedido)
	err := c.cc.Invoke(ctx, "/grpc.PedidosService/GetRepartidor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PedidosServiceServer is the server API for PedidosService service.
// All implementations must embed UnimplementedPedidosServiceServer
// for forward compatibility
type PedidosServiceServer interface {
	// servicios cliente
	PostPedido(context.Context, *PedidoSolicitudRequest) (*Pedido, error)
	// servicios restaurante
	PostPedidoRestaurante(context.Context, *Pedido) (*Pedido, error)
	PostEntregarRepartidor(context.Context, *IdPedido) (*Pedido, error)
	GetRestaurante(context.Context, *IdPedido) (*Pedido, error)
	// servicios repartidor
	PostPedidoRepartidor(context.Context, *Pedido) (*Pedido, error)
	PostEntregarCliente(context.Context, *IdPedido) (*Pedido, error)
	GetRepartidor(context.Context, *IdPedido) (*Pedido, error)
	mustEmbedUnimplementedPedidosServiceServer()
}

// UnimplementedPedidosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPedidosServiceServer struct {
}

func (UnimplementedPedidosServiceServer) PostPedido(context.Context, *PedidoSolicitudRequest) (*Pedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPedido not implemented")
}
func (UnimplementedPedidosServiceServer) PostPedidoRestaurante(context.Context, *Pedido) (*Pedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPedidoRestaurante not implemented")
}
func (UnimplementedPedidosServiceServer) PostEntregarRepartidor(context.Context, *IdPedido) (*Pedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEntregarRepartidor not implemented")
}
func (UnimplementedPedidosServiceServer) GetRestaurante(context.Context, *IdPedido) (*Pedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurante not implemented")
}
func (UnimplementedPedidosServiceServer) PostPedidoRepartidor(context.Context, *Pedido) (*Pedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPedidoRepartidor not implemented")
}
func (UnimplementedPedidosServiceServer) PostEntregarCliente(context.Context, *IdPedido) (*Pedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEntregarCliente not implemented")
}
func (UnimplementedPedidosServiceServer) GetRepartidor(context.Context, *IdPedido) (*Pedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepartidor not implemented")
}
func (UnimplementedPedidosServiceServer) mustEmbedUnimplementedPedidosServiceServer() {}

// UnsafePedidosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PedidosServiceServer will
// result in compilation errors.
type UnsafePedidosServiceServer interface {
	mustEmbedUnimplementedPedidosServiceServer()
}

func RegisterPedidosServiceServer(s grpc.ServiceRegistrar, srv PedidosServiceServer) {
	s.RegisterService(&PedidosService_ServiceDesc, srv)
}

func _PedidosService_PostPedido_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoSolicitudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidosServiceServer).PostPedido(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PedidosService/PostPedido",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidosServiceServer).PostPedido(ctx, req.(*PedidoSolicitudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedidosService_PostPedidoRestaurante_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidosServiceServer).PostPedidoRestaurante(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PedidosService/PostPedidoRestaurante",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidosServiceServer).PostPedidoRestaurante(ctx, req.(*Pedido))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedidosService_PostEntregarRepartidor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdPedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidosServiceServer).PostEntregarRepartidor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PedidosService/PostEntregarRepartidor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidosServiceServer).PostEntregarRepartidor(ctx, req.(*IdPedido))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedidosService_GetRestaurante_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdPedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidosServiceServer).GetRestaurante(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PedidosService/GetRestaurante",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidosServiceServer).GetRestaurante(ctx, req.(*IdPedido))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedidosService_PostPedidoRepartidor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidosServiceServer).PostPedidoRepartidor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PedidosService/PostPedidoRepartidor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidosServiceServer).PostPedidoRepartidor(ctx, req.(*Pedido))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedidosService_PostEntregarCliente_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdPedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidosServiceServer).PostEntregarCliente(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PedidosService/PostEntregarCliente",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidosServiceServer).PostEntregarCliente(ctx, req.(*IdPedido))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedidosService_GetRepartidor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdPedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidosServiceServer).GetRepartidor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PedidosService/GetRepartidor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidosServiceServer).GetRepartidor(ctx, req.(*IdPedido))
	}
	return interceptor(ctx, in, info, handler)
}

// PedidosService_ServiceDesc is the grpc.ServiceDesc for PedidosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PedidosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PedidosService",
	HandlerType: (*PedidosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostPedido",
			Handler:    _PedidosService_PostPedido_Handler,
		},
		{
			MethodName: "PostPedidoRestaurante",
			Handler:    _PedidosService_PostPedidoRestaurante_Handler,
		},
		{
			MethodName: "PostEntregarRepartidor",
			Handler:    _PedidosService_PostEntregarRepartidor_Handler,
		},
		{
			MethodName: "GetRestaurante",
			Handler:    _PedidosService_GetRestaurante_Handler,
		},
		{
			MethodName: "PostPedidoRepartidor",
			Handler:    _PedidosService_PostPedidoRepartidor_Handler,
		},
		{
			MethodName: "PostEntregarCliente",
			Handler:    _PedidosService_PostEntregarCliente_Handler,
		},
		{
			MethodName: "GetRepartidor",
			Handler:    _PedidosService_GetRepartidor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cliente.proto",
}
